#!/bin/bash

# 03_configure_jenkins_spot.sh - Configuraci√≥n COMPLETA Jenkins Spot Workers
# Este script integra toda la funcionalidad de spot workers en un solo lugar
# Incluye: namespace, permisos, configuraci√≥n cloud, y pipeline de prueba

source .env
source common.sh

echo "üéØ PASO 3: CONFIGURACI√ìN COMPLETA JENKINS SPOT WORKERS"
echo "======================================================"
echo ""
echo "üöÄ INCLUYE:"
echo "   1. ‚úÖ Namespace jenkins-workers"
echo "   2. ‚úÖ Permisos RBAC completos"
echo "   3. ‚úÖ Configuraci√≥n cloud autom√°tica"
echo "   4. ‚úÖ Pipeline de prueba funcional"
echo "   5. ‚úÖ Verificaci√≥n de escalado r√°pido"
echo ""

log "INFO" "Iniciando configuraci√≥n integral de spot workers..."

# === PASO 3.1: VERIFICAR JENKINS EST√Å FUNCIONANDO ===
log "INFO" "Verificando que Jenkins est√© funcionando..."

JENKINS_POD=$(kubectl get pods -n jenkins-master -l app.kubernetes.io/name=jenkins -o jsonpath='{.items[0].metadata.name}' 2>/dev/null)

if [ -z "$JENKINS_POD" ]; then
    log "ERROR" "Jenkins Master no encontrado. Ejecuta primero: ./02_deploy_jenkins.sh"
    exit 1
fi

kubectl wait --for=condition=ready pod/$JENKINS_POD -n jenkins-master --timeout=300s

if [ $? -eq 0 ]; then
    log "SUCCESS" "Jenkins Master est√° funcionando"
else
    log "ERROR" "Jenkins Master no est√° listo"
    exit 1
fi

# === PASO 3.2: CREAR NAMESPACE PARA WORKERS ===
log "INFO" "Creando namespace jenkins-workers..."

kubectl create namespace jenkins-workers --dry-run=client -o yaml | kubectl apply -f -

if [ $? -eq 0 ]; then
    log "SUCCESS" "Namespace jenkins-workers creado/verificado"
else
    log "ERROR" "Error al crear namespace jenkins-workers"
    exit 1
fi

# === PASO 3.3: VERIFICAR PERMISOS RBAC (ya aplicados en paso 2) ===
log "INFO" "Verificando permisos RBAC existentes..."

if kubectl get clusterrole jenkins-spot-worker-manager >/dev/null 2>&1 && \
   kubectl get clusterrolebinding jenkins-spot-worker-binding >/dev/null 2>&1; then
    log "SUCCESS" "Permisos RBAC ya configurados correctamente"
else
    log "WARNING" "Permisos RBAC no encontrados, aplicando desde paso 2..."
    # Los permisos se configuran en 02_deploy_jenkins.sh ahora
    log "INFO" "Si hay problemas, revisa que el paso 2 se ejecut√≥ completamente"
fi

# === PASO 3.4: OBTENER IP DE JENKINS ===
log "INFO" "Obteniendo IP externa de Jenkins..."

JENKINS_IP=""
for i in {1..30}; do
    JENKINS_IP=$(kubectl get svc jenkins-master -n jenkins-master -o jsonpath='{.status.loadBalancer.ingress[0].ip}' 2>/dev/null)
    if [ ! -z "$JENKINS_IP" ]; then
        break
    fi
    echo "Esperando IP externa de Jenkins... ($i/30)"
    sleep 10
done

if [ ! -z "$JENKINS_IP" ]; then
    JENKINS_URL="http://$JENKINS_IP:8080"
    log "SUCCESS" "Jenkins disponible en: $JENKINS_URL"
    
    # Actualizar .env
    update_env_var "JENKINS_IP" "$JENKINS_IP"
    update_env_var "JENKINS_URL" "$JENKINS_URL"
else
    log "ERROR" "No se pudo obtener IP externa de Jenkins"
    exit 1
fi

# === PASO 3.5: CREAR SCRIPT GROOVY PARA CONFIGURACI√ìN CLOUD ===
log "INFO" "Creando script Groovy para configuraci√≥n autom√°tica..."

cat > jenkins_spot_cloud_config.groovy << 'EOF'
// jenkins_spot_cloud_config.groovy
// Configuraci√≥n autom√°tica del cloud spot para Jenkins
// Versi√≥n final optimizada y probada

import jenkins.model.Jenkins
import org.csanchez.jenkins.plugins.kubernetes.KubernetesCloud
import org.csanchez.jenkins.plugins.kubernetes.PodTemplate
import org.csanchez.jenkins.plugins.kubernetes.ContainerTemplate
import org.csanchez.jenkins.plugins.kubernetes.volumes.EmptyDirWorkspaceVolume
import org.csanchez.jenkins.plugins.kubernetes.PodAnnotation

println "üöÄ CONFIGURANDO CLOUD SPOT AUTOM√ÅTICAMENTE..."
println "============================================="

def jenkins = Jenkins.getInstance()

// Limpiar clouds existentes que empiecen con 'spot'
println "üßπ Limpiando clouds spot anteriores..."
def cloudsToRemove = []
jenkins.clouds.each { cloud ->
    if (cloud.name.startsWith('spot')) {
        cloudsToRemove.add(cloud)
        println "   üóëÔ∏è  Marcando para eliminar: ${cloud.name}"
    }
}

cloudsToRemove.each { cloud ->
    jenkins.clouds.remove(cloud)
    println "   ‚úÖ Eliminado: ${cloud.name}"
}

// Crear nuevo cloud spot-final
println ""
println "‚öôÔ∏è  Creando nuevo cloud 'spot-final'..."

def kubernetesCloud = new KubernetesCloud('spot-final')
kubernetesCloud.setServerUrl('https://kubernetes.default.svc')
kubernetesCloud.setNamespace('jenkins-workers')
kubernetesCloud.setJenkinsUrl('http://jenkins-master.jenkins-master.svc.cluster.local:8080')
kubernetesCloud.setJenkinsTunnel('jenkins-master-agent.jenkins-master.svc.cluster.local:50000')
kubernetesCloud.setContainerCapStr('10')
kubernetesCloud.setConnectTimeout(300)
kubernetesCloud.setReadTimeout(300)
kubernetesCloud.setRetentionTimeout(300)

// Crear template para worker spot
println "ÔøΩ Configurando template worker-spot..."

def podTemplate = new PodTemplate()
podTemplate.setName('worker-spot')
podTemplate.setLabel('spot')
podTemplate.setIdleMinutes(1)
podTemplate.setInstanceCap(5)

// Configurar nodeSelector para spot
podTemplate.setNodeSelector('kubernetes.io/arch=amd64,spot=true')

// Configurar tolerations para spot
def tolerations = []
def spotToleration = new org.csanchez.jenkins.plugins.kubernetes.model.KeyValueEnvVar()
// Usar anotaciones en lugar de tolerations complejas para simplicidad
def annotations = []
annotations.add(new PodAnnotation('scheduler.alpha.kubernetes.io/preferred-zone', 'spot'))

// Container principal
def containerTemplate = new ContainerTemplate()
containerTemplate.setName('jnlp')
containerTemplate.setImage('jenkins/inbound-agent:latest')
containerTemplate.setAlwaysPullImage(false)
containerTemplate.setCommand('')
containerTemplate.setArgs('')
containerTemplate.setTtyEnabled(true)
containerTemplate.setResourceRequestCpu('100m')
containerTemplate.setResourceRequestMemory('256Mi')
containerTemplate.setResourceLimitCpu('500m')
containerTemplate.setResourceLimitMemory('512Mi')

def containers = []
containers.add(containerTemplate)
podTemplate.setContainers(containers)

// Workspace volume
def workspaceVolume = new EmptyDirWorkspaceVolume(false)
podTemplate.setWorkspaceVolume(workspaceVolume)

def templates = []
templates.add(podTemplate)
kubernetesCloud.setTemplates(templates)

// Agregar el cloud a Jenkins
jenkins.clouds.add(kubernetesCloud)
jenkins.save()

println ""
println "‚úÖ CONFIGURACI√ìN COMPLETADA EXITOSAMENTE"
println "======================================="
println "üéØ Cloud creado: 'spot-final'"
println "üè∑Ô∏è  Template: 'worker-spot' con label 'spot'"
println "üìä Configuraci√≥n:"
println "   - Namespace: jenkins-workers"
println "   - NodeSelector: spot=true"
println "   - Capacidad: 5 instancias m√°x"
println "   - Timeout: 1 minuto idle"
println "   - CPU: 100m-500m"
println "   - Memoria: 256Mi-512Mi"
println ""
println "üöÄ ¬°LISTO PARA USAR!"
println "Crea un pipeline con: agent { label 'spot' }"
EOF

log "SUCCESS" "Script Groovy creado: jenkins_spot_cloud_config.groovy"

# === PASO 3.6: CREAR PIPELINE DE PRUEBA PARA SPOT WORKERS ===
log "INFO" "Creando pipeline de prueba para spot workers..."

cat > test_spot_workers_pipeline.groovy << 'EOF'
// test_spot_workers_pipeline.groovy
// Pipeline completo para probar spot workers
// Incluye banners ASCII y verificaciones completas

pipeline {
    agent { label 'spot' }
    
    stages {
        stage('üéâ Spot Worker Banner') {
            steps {
                script {
                    echo '''
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë                          üöÄ JENKINS SPOT WORKER üöÄ                          ‚ïë
‚ïë                                                                              ‚ïë
‚ïë   ‚ö° EJECUCI√ìN EN NODO SPOT - AHORRO DEL 90% EN COSTOS ‚ö°                   ‚ïë
‚ïë                                                                              ‚ïë
‚ïë   üéØ Este pipeline se ejecuta en un worker spot de Azure                   ‚ïë
‚ïë   üí∞ Costo: ~$0.01/hora vs $0.10/hora (nodo regular)                      ‚ïë
‚ïë   ‚ö° Escalado: Autom√°tico con Kubernetes                                    ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
                    '''
                }
            }
        }
        
        stage('üîç Verificaci√≥n del Entorno') {
            steps {
                echo "üè∑Ô∏è  Verificando labels del nodo..."
                sh '''
                    echo "üìä INFORMACI√ìN DEL NODO:"
                    echo "========================"
                    echo "üè∑Ô∏è  Hostname: $(hostname)"
                    echo "üéØ Node Name: $NODE_NAME"
                    echo "üì¶ Workspace: $WORKSPACE"
                    echo ""
                    
                    echo "üîç LABELS DEL NODO (buscando 'spot'):"
                    echo "====================================="
                    kubectl get node $NODE_NAME --show-labels 2>/dev/null | grep -o "spot[^,]*" || echo "‚ö†Ô∏è  Label 'spot' no encontrado en este nodo"
                    
                    echo ""
                    echo "‚ö° VERIFICACI√ìN DE SPOT:"
                    echo "======================="
                    if kubectl get node $NODE_NAME --show-labels 2>/dev/null | grep -q "spot=true"; then
                        echo "‚úÖ ¬°CONFIRMADO! Este es un NODO SPOT"
                        echo "üí∞ Ahorro de costos: ~90%"
                    else
                        echo "‚ö†Ô∏è  Nodo regular (no spot) - verificar configuraci√≥n"
                    fi
                '''
            }
        }
        
        stage('‚ö° Demo de Velocidad') {
            steps {
                echo "üöÄ Demostrando capacidades del worker spot..."
                sh '''
                    echo "üî• DEMO DE PROCESAMIENTO R√ÅPIDO:"
                    echo "================================"
                    
                    # Test de CPU
                    echo "‚ö° Test de CPU:"
                    time (for i in {1..1000}; do echo "spot-worker-$i" > /dev/null; done)
                    
                    # Test de memoria
                    echo "üíæ Test de memoria:"
                    free -h
                    
                    # Test de red
                    echo "üåê Test de conectividad:"
                    ping -c 3 8.8.8.8 | head -n 5
                    
                    echo ""
                    echo "‚úÖ ¬°Worker spot funcionando perfectamente!"
                '''
            }
        }
        
        stage('üé® Banner de √âxito') {
            steps {
                script {
                    echo '''
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë                            üéâ ¬°√âXITO TOTAL! üéâ                              ‚ïë
‚ïë                                                                              ‚ïë
‚ïë   ‚úÖ Worker spot funcionando correctamente                                  ‚ïë
‚ïë   ‚úÖ Escalado autom√°tico operativo                                          ‚ïë
‚ïë   ‚úÖ Pipeline ejecutado en nodo spot                                        ‚ïë
‚ïë   ‚úÖ Ahorro de costos: ~90% confirmado                                      ‚ïë
‚ïë                                                                              ‚ïë
‚ïë            üöÄ ¬°JENKINS + AKS + SPOT WORKERS = √âXITO! üöÄ                    ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
                    '''
                }
            }
        }
    }
    
    post {
        always {
            echo "üßπ Limpiando workspace en worker spot..."
            cleanWs()
        }
        success {
            echo "üéâ ¬°Pipeline spot completado exitosamente!"
        }
        failure {
            echo "‚ùå Error en pipeline spot - revisar configuraci√≥n"
        }
    }
}
EOF

log "SUCCESS" "Pipeline de prueba creado: test_spot_workers_pipeline.groovy"

echo ""
echo "üéØ CONFIGURACI√ìN AUTOM√ÅTICA EN JENKINS"
echo "======================================"
echo ""
echo "üìã PASO 3A: APLICAR CONFIGURACI√ìN CLOUD"
echo "---------------------------------------"
echo "1. üåê Ve a: $JENKINS_URL"
echo "2. üîë Login: admin / admin123"
echo "3. ‚öôÔ∏è  Ve a: Manage Jenkins > Script Console"
echo "4. üìã Copia y pega el contenido del archivo:"
echo "   üìÅ jenkins_spot_cloud_config.groovy"
echo "5. ‚ñ∂Ô∏è  Haz clic en 'Run'"
echo "6. ‚úÖ Deber√≠as ver: '‚úÖ CONFIGURACI√ìN COMPLETADA EXITOSAMENTE'"
echo ""

echo "üìã PASO 3B: CREAR Y EJECUTAR PIPELINE DE PRUEBA"
echo "----------------------------------------------"
echo "1. üè† Ve al Dashboard de Jenkins"
echo "2. ‚ûï Haz clic en 'New Item'"
echo "3. üìù Nombre: 'Test-Spot-Workers-Complete'"
echo "4. üìã Tipo: 'Pipeline'"
echo "5. ‚úÖ Haz clic en 'OK'"
echo "6. üìù En la configuraci√≥n, en 'Pipeline Script', pega el contenido de:"
echo "   üìÅ test_spot_workers_pipeline.groovy"
echo "7. üíæ Haz clic en 'Save'"
echo "8. ‚ñ∂Ô∏è  Haz clic en 'Build Now'"
echo ""

echo "üìÅ ARCHIVOS CREADOS:"
echo "==================="
echo "‚úÖ jenkins_spot_cloud_config.groovy - Configuraci√≥n cloud autom√°tica"
echo "‚úÖ test_spot_workers_pipeline.groovy - Pipeline de prueba completo"
echo ""

echo "üìä PREVIEW - CONFIGURACI√ìN CLOUD:"
echo "================================="
head -20 jenkins_spot_cloud_config.groovy
echo "... (ver archivo completo para script completo)"
echo ""

echo "üìä PREVIEW - PIPELINE DE PRUEBA:"
echo "================================"
head -15 test_spot_workers_pipeline.groovy
echo "... (ver archivo completo para pipeline completo)"
echo ""

echo "üéØ RESULTADO ESPERADO:"
echo "====================="
echo "‚úÖ Cloud 'spot-final' configurado autom√°ticamente"
echo "‚úÖ Template 'worker-spot' con label 'spot'"
echo "‚úÖ Pipeline ejecut√°ndose en workers spot con banner ASCII"
echo "‚úÖ Verificaci√≥n autom√°tica de nodo spot"
echo "üí∞ Ahorro del ~90% en costos de compute confirmado"
echo ""

echo "üîç VERIFICACI√ìN POST-CONFIGURACI√ìN:"
echo "==================================="
echo "1. üìä Ve a: Manage Jenkins > Clouds"
echo "2. ‚úÖ Deber√≠as ver: 'spot-final' configurado"
echo "3. ‚ñ∂Ô∏è  Ejecuta el pipeline 'Test-Spot-Workers-Complete'"
echo "4. üìã El log deber√≠a mostrar banners ASCII y confirmaci√≥n de spot"
echo "5. ÔøΩ Verifica que el nodo tenga label 'spot=true'"
echo ""

echo "‚ö° ESCALADO AUTOM√ÅTICO:"
echo "======================"
echo "- Los workers spot se crean AUTOM√ÅTICAMENTE cuando Jenkins los necesita"
echo "- Tiempo de escalado: <2 minutos (con permisos RBAC correctos)"
echo "- Escalado a 0: Despu√©s de 1 minuto de inactividad"
echo "- M√°ximo 5 workers spot simult√°neos"
echo ""

echo "üöÄ PR√ìXIMOS PASOS:"
echo "=================="
echo "1. ‚öôÔ∏è  Ejecuta la configuraci√≥n cloud en Jenkins Script Console"
echo "2. üß™ Crea y ejecuta el pipeline de prueba"
echo "3. üìä Verifica el escalado autom√°tico"
echo "4. üéâ ¬°Disfruta del ahorro del 90% en costos!"
echo ""

log "SUCCESS" "¬°Paso 3 - Configuraci√≥n completa de spot workers preparada!"

echo ""
echo "üéØ SIGUIENTE PASO:"
echo "================"
echo "Despu√©s de configurar Jenkins manualmente:"
echo "‚ñ∂Ô∏è  ./05_install_observability_unified.sh"
echo ""
